- hosts: dockerhost
  become: yes

  vars_files:
    - "vars/config.yml"

  tasks:

  - name: Create a os container
    docker_container:
      name: "{{ item.image_name }}"
      image: "{{ item.image_name }}:{{ item.image_tag }}"
      command: ["sleep", "infinity"]
      networks:
        - name: "{{ network_name }}"
          ipv4_address: "{{ item.ip }}"
      purge_networks: yes
    with_items: "{{ images }}"
#    when: item.image_name == 'centos7'

- hosts: centos7
#  become: yes
#  connection: docker
  gather_facts: no

  vars_files:
    - "vars/config.yml"

  tasks:
# RHEL7.4からhttp-parserがRHEL本体に含まれるようになったので、EPELからhttp-parserが削除された。
# しかし、CentOSは2017/8/16現在、RHEL7.4に相当するリリースがされていないため、CentOSのリポジトリにはhttp-parserがまだ存在しない。
# EPELのnodejsは依存関係でhttp-parserが必要だが、CentOSではhttp-parserが存在しないため、エラーになる。
# 暫定対応として、過去にダウンロードしていてhttp-parserのRPMファイルを使用する。
  - name: download http-parser,http-parser-devel
    get_url:
      url: https://github.com/taka379sy/temp/raw/master/{{ item }}
      dest: /tmp/{{ item }}
    with_items:
      - http-parser-2.7.1-3.el7.x86_64.rpm
      - http-parser-devel-2.7.1-3.el7.x86_64.rpm
    environment:
      https_proxy: "http://{{ local_proxy }}"
      http_proxy: "http://{{ local_proxy }}"

  - name: install http-parser,http-parser-devel
    shell: yum install /tmp/http-parser-* -y

  - name: Copies files to remote locations
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      mode: u=rwx,g=r,o=r
    with_items:
      - { src: "files/redash/redash.sh", dest: "/usr/local/bin/redash.sh" }

  - name: yum install
    yum:
      name: "{{ item }}"
      state: latest
    with_items:
      - python
      - postgresql-server
      - redis
      - nodejs
      - python2-pip
      - gcc
      - python-devel
      - postgresql-devel
      - openssl-devel
      - git
      - MySQL-python
      - httpd
      - unzip
      - libffi-devel
      - libffi
    environment:
      https_proxy: "http://{{ local_proxy }}"
      http_proxy: "http://{{ local_proxy }}"

  - name: start redis
    shell: su - redis -g redis -s /bin/bash -c "/usr/bin/redis-server /etc/redis.conf --daemonize no &"

  - name: init postgresql
    shell: su - postgres -c "initdb"

  - name: edit pg_hba.conf
    lineinfile:
      path: '/var/lib/pgsql/data/pg_hba.conf'
      line: "{{ item }}"
    with_items:
      - "host    all             all             localhost            trust"

  - name: init postgresql
    shell: su - postgres -g postgres -c "/usr/bin/pg_ctl start -D /var/lib/pgsql/data -s -w -t 300"

  - name: set ProxyPass to /etc/httpd/conf.d/redash.conf
    lineinfile:
      dest: "/etc/httpd/conf.d/redash.conf"
      line: "{{ item }}"
      create: yes
    with_items:
      - ProxyPass / http://localhost:5000/
      - ProxyPassReverse / http://localhost:5000/

  - name: start httpd
    shell: /usr/sbin/httpd  -DFOREGROUND &

  - name: create directory for redash
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - /opt/redash
      - /root/work/pip

  - name: download redash,get-pip.py
    get_url:
      url: "{{ item.url }}"
      dest: "{{ item.dest }}"
    with_items:
      - { url: "https://github.com/getredash/redash/archive/master.zip", dest: "/opt/redash/master.zip" }
      - { url: "https://bootstrap.pypa.io/get-pip.py", dest: "/root/work/pip/get-pip.py" }

  - name: download redash
    shell: unzip /opt/redash/master.zip -d /opt/redash/

  - name: pip download pip,setuptools,wheel
    pip:
      name: "{{ item }}"
      extra_args: "-d /root/work/pip/"
      state: latest
    with_items:
      - pip
      - setuptools
      - wheel
    environment:
      https_proxy: "http://{{ local_proxy }}"
      http_proxy: "http://{{ local_proxy }}"

  - name: yum remove python2-pip,python-setuptools
    yum:
      name: "{{ item }}"
      state: absent
    with_items:
      - python2-pip
      - python-setuptools
    environment:
      https_proxy: "http://{{ local_proxy }}"
      http_proxy: "http://{{ local_proxy }}"

  - name: pip install pip,setuptools,wheel
    shell: python get-pip.py
    args:
      chdir: /root/work/pip/

  - name: pip install redash-requirements
    pip:
      requirements: "{{ item }}" 
      state: latest
    with_items:
      - /opt/redash/redash-master/requirements.txt
      - /opt/redash/redash-master/requirements_dev.txt
    environment:
      https_proxy: "http://{{ local_proxy }}"
      http_proxy: "http://{{ local_proxy }}"

  - name: git config
    git_config:
      name: alias.ci
      scope: global
      value: commit
    with_items:
      - { name: "http.proxy", scope: "global", value: "http://{{ local_proxy }}" }
      - { name: "https.proxy", scope: "global", value: "http://{{ local_proxy }}" }
      - { name: "hub.protocol", scope: "global", value: "https" }

  - name: npm config
    shell: "npm config set proxy http://{{ local_proxy }}"

  - name: file list (/opt/redash/redash-master/*.json)
    shell: 'find /opt/redash/redash-master/ -maxdepth 1 -type f -name "*.json"'
    register: filelist
    changed_when: false

  - name: edit /opt/redash/redash-master/*.json
    replace:
      path: "{{ item }}"
      regexp: "git+https"
      replace: "https"
    with_items: "{{ filelist.stdout_lines }}"

  - name: edit /opt/redash/redash-master/*.json
    replace:
      path: "{{ item }}"
      regexp: "git:"
      replace: "https:"
    with_items: "{{ filelist.stdout_lines }}"

  - name: npm install
    shell: npm install
    args:
      chdir: /opt/redash/redash-master/

  - name: npm run build
    shell: npm run build
    args:
      chdir: /opt/redash/redash-master/

  - name: check_settings
    shell: su - postgres -g postgres -c "/opt/redash/redash-master/bin/run /opt/redash/redash-master/manage.py check_settings"

  - name: create_tables
    shell: su postgres -g postgres -c "/opt/redash/redash-master/bin/run /opt/redash/redash-master/manage.py database create_tables"
    args:
      chdir: /opt/redash/redash-master/

  - name: copy postgresql datadir
    shell: cp -pr /var/lib/pgsql/data /root/

  - name: copy log dir
    shell: cp -pr /var/log/ /root/

- hosts: dockerhost
  become: yes

  vars_files:
    - "vars/config.yml"

  tasks:

  - name: Stop base_os container
    docker_container:
      name: "{{ item.image_name }}"
      state: stopped
    with_items: "{{ images }}"

  - name: absent base_os image
    docker_image:
      name: "{{ item.image_name }}:{{ item.image_tag }}"
      state: absent
    with_items: "{{ redash }}"

  - name: docker commit
    shell: docker commit "{{ item.base_os_name }}" "{{ item.image_name }}:{{ item.image_tag }}"
    with_items: "{{ redash }}"

  - name: absent base_os container
    docker_container:
      name: "{{ item.image_name }}"
      state: absent
    with_items: "{{ images }}"
