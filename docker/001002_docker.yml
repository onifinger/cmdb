# 概要
#  開発・メンテナンス環境のdockerの設定
# 説明
#  001001_os.ymlでＯＳ設定完了後、dockerの設定を行う。
# 実行コマンド
#  ansible-playbook 001002_docker.yml -i hosts -vvv
# 変更履歴
#  2017/10/24
#   python2-pipは不要のため削除

- hosts: dockerhost
  become: yes

  vars_files:
    - "vars/config.yml"

# proxyを使用しない環境ではコメントアウト
#  environment:
#    https_proxy: "http://{{ local_proxy }}"
#    http_proxy: "http://{{ local_proxy }}"
  
  tasks:

# dockerのインストール。ansibleでdockerを操作するためのpythonモジュールもインストール。
  - name: yum install docker
    yum:
      name: "{{ item }}"
      state: latest
    with_items:
      - docker
#      - python2-pip
      - python-docker-py
      - python-docker-pycreds

# Proxy環境下でコンテナイメージを取得する際に設定。Proxyがない場合はコメントアウト
#  - name: set proxy to docker
#    lineinfile:
#      path: /lib/systemd/system/docker.service
#      insertbefore: ".*ExecStart.*"
#      line: "Environment=\"http_proxy=http://{{ local_proxy }}\""

# 変更したdockerの設定ファイルの読み込み
  - name: systemd demon reload
    shell: systemctl daemon-reload

# dockerの起動、自動起動設定
  - name: restart docker
    service:
      name: docker
      state: restarted
      enabled: yes

# dockerの独自ネットワークの作成
  - name: create a network with options
    docker_network:
      name: "{{ network_name }}"
      ipam_options:
        subnet: "{{ subnet }}"
        gateway: "{{ gateway }}"
        iprange: "{{ iprange }}"
      driver_options:
        com.docker.network.bridge.name: "{{ network_name }}"

# コンテナからホストへの通信をブロックしない設定を動的に追加
  - name: allow access from container to host
    iptables:
      action: insert
      chain: INPUT
      jump: ACCEPT
      source: "{{ item }}"
    with_items:
      "{{ local_net }}"

# 上記ルールを永続的にする設定追加
  - name: set rule to iptables
    lineinfile:
      dest: "/etc/sysconfig/iptables"
      insertafter: "^:OUTPUT"
      line: "-A INPUT -s {{ item }} -j ACCEPT"
    with_items:
      "{{ local_net }}"

